# Generated by Django 3.1.2 on 2021-01-07 03:04

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('map', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('code', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='GeologicalProvince',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('ptype', models.CharField(blank=True, max_length=70, null=True)),
                ('rank', models.CharField(blank=True, max_length=70, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GovernmentRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Holder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='HolderPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='HolderType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.CharField(max_length=30)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LocalGovernment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70)),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('code', models.CharField(max_length=6, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='MaterialCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=130)),
            ],
        ),
        migrations.CreateModel(
            name='OccOriginalID',
            fields=[
                ('code', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='OccSize',
            fields=[
                ('code', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='OccStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccStatusSimp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccTypeSimp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('occid', models.CharField(max_length=14, primary_key=True, serialize=False)),
                ('pnt', django.contrib.gis.db.models.fields.PointField(srid=4202)),
                ('geoprovince', models.ManyToManyField(blank=True, related_name='geoprovince_occurrence', to='map.GeologicalProvince')),
                ('govregion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='govregion_occurrence', to='map.governmentregion')),
                ('localgov', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='localgov_occurrence', to='map.localgovernment')),
                ('majmat', models.ManyToManyField(blank=True, related_name='majmat_occurrence', to='map.Material')),
                ('minmat', models.ManyToManyField(blank=True, related_name='minmat_occurrence', to='map.Material')),
                ('name', models.ManyToManyField(blank=True, related_name='name_occurrence', to='map.OccName')),
                ('oid', models.ManyToManyField(blank=True, related_name='oid_occurrence', to='map.OccOriginalID')),
                ('size', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='size_occurrence', to='map.occsize')),
            ],
        ),
        migrations.CreateModel(
            name='Shore',
            fields=[
                ('code', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('code', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='TenAct',
            fields=[
                ('code', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70)),
                ('state', models.CharField(max_length=10)),
                ('link', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TenOriginalID',
            fields=[
                ('code', models.CharField(max_length=22, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='TenStatusSimp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70)),
            ],
        ),
        migrations.CreateModel(
            name='TenTypeSimp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TenType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fname', models.CharField(max_length=70)),
                ('original', models.CharField(max_length=50)),
                ('act', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='act_tentype', to='map.tenact')),
                ('simple', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_tentype', to='map.tentypesimp')),
            ],
        ),
        migrations.CreateModel(
            name='TenStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.CharField(max_length=100)),
                ('simple', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_tenstatus', to='map.tenstatussimp')),
            ],
        ),
        migrations.CreateModel(
            name='TenHolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percown', models.FloatField()),
                ('name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='name_tenholder', to='map.holder')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='position_tenholder', to='map.holderposition')),
            ],
        ),
        migrations.CreateModel(
            name='Tenement',
            fields=[
                ('tenid', models.CharField(max_length=16, primary_key=True, serialize=False)),
                ('lodgedate', models.DateField()),
                ('startdate', models.DateField()),
                ('enddate', models.DateField()),
                ('poly', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4202)),
                ('geoprovince', models.ManyToManyField(blank=True, related_name='geoprovince_tenement', to='map.GeologicalProvince')),
                ('govregion', models.ManyToManyField(blank=True, related_name='govregion_tenement', to='map.GovernmentRegion')),
                ('holder', models.ManyToManyField(blank=True, related_name='holder_tenement', to='map.TenHolder')),
                ('localgov', models.ManyToManyField(blank=True, related_name='localgov_tenement', to='map.LocalGovernment')),
                ('majmat', models.ManyToManyField(blank=True, related_name='majmat_tenement', to='map.Material')),
                ('minmat', models.ManyToManyField(blank=True, related_name='minmat_tenement', to='map.Material')),
                ('occurrence', models.ManyToManyField(blank=True, related_name='occurrence_tenement', to='map.Occurrence')),
                ('oid', models.ManyToManyField(blank=True, related_name='oid_tenement', to='map.TenOriginalID')),
                ('shore', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shore_tenement', to='map.shore')),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='state_tenement', to='map.state')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_tenement', to='map.tenstatus')),
                ('typ', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='typ_tenement', to='map.tentype')),
            ],
        ),
        migrations.AddField(
            model_name='occurrence',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='state_occurrence', to='map.state'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_occurrence', to='map.occstatus'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='typ',
            field=models.ManyToManyField(blank=True, related_name='typ_occurrence', to='map.OccType'),
        ),
        migrations.AddField(
            model_name='occtype',
            name='simple',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_occtype', to='map.occtypesimp'),
        ),
        migrations.AddField(
            model_name='occstatus',
            name='simple',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_occstatus', to='map.occstatussimp'),
        ),
        migrations.AddField(
            model_name='material',
            name='category',
            field=models.ManyToManyField(blank=True, related_name='category_material', to='map.MaterialCategory'),
        ),
        migrations.CreateModel(
            name='Listed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticker', models.CharField(max_length=6)),
                ('exchange', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exchange_listed', to='map.exchange')),
            ],
        ),
        migrations.AddField(
            model_name='holder',
            name='listed',
            field=models.ManyToManyField(blank=True, related_name='listed_holder', to='map.Listed'),
        ),
        migrations.AddField(
            model_name='holder',
            name='typ',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='typ_holder', to='map.holdertype'),
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percown', models.FloatField()),
                ('child', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_holderrelation', to='map.holder')),
                ('name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='name_holderrelation', to='map.holder')),
            ],
            options={
                'unique_together': {('name', 'child')},
            },
        ),
    ]
